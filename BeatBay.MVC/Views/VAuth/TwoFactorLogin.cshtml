<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Two-Factor Authentication</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #1a1a2e 0%, #16213e 25%, #0f3460 50%, #1a1a2e 100%);
            min-height: 100vh;
            overflow-x: hidden;
        }

        .container {
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 3rem 1rem;
            position: relative;
        }

        /* Animated background elements */
        .bg-animation {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            opacity: 0.2;
            pointer-events: none;
            overflow: hidden;
        }

        .bg-circle {
            position: absolute;
            border-radius: 50%;
            filter: blur(60px);
            animation: pulse 4s ease-in-out infinite;
        }

            .bg-circle:nth-child(1) {
                width: 18rem;
                height: 18rem;
                background: #8b5cf6;
                top: 25%;
                left: 25%;
                animation-delay: 0s;
            }

            .bg-circle:nth-child(2) {
                width: 18rem;
                height: 18rem;
                background: #3b82f6;
                top: 33%;
                right: 25%;
                animation-delay: 2s;
            }

            .bg-circle:nth-child(3) {
                width: 18rem;
                height: 18rem;
                background: #6366f1;
                bottom: 25%;
                left: 33%;
                animation-delay: 4s;
            }

        .content {
            max-width: 28rem;
            width: 100%;
            position: relative;
            z-index: 10;
        }

        /* Header Section */
        .header {
            text-align: center;
            margin-bottom: 2rem;
        }

        .logo {
            width: 5rem;
            height: 5rem;
            background: linear-gradient(135deg, #8b5cf6, #3b82f6);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 1.5rem;
            box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
            transition: transform 0.3s ease;
        }

            .logo:hover {
                transform: scale(1.05);
            }

            .logo svg {
                width: 2.5rem;
                height: 2.5rem;
                color: white;
            }

        .title {
            font-size: 2.5rem;
            font-weight: 700;
            color: white;
            margin-bottom: 0.75rem;
            letter-spacing: -0.025em;
        }

        .subtitle {
            color: #d1d5db;
            font-size: 1.125rem;
            margin-bottom: 1rem;
        }

        .dots {
            display: flex;
            justify-content: center;
            gap: 0.5rem;
            margin-top: 1rem;
        }

        .dot {
            width: 0.5rem;
            height: 0.5rem;
            border-radius: 50%;
            animation: bounce 2s infinite;
        }

            .dot:nth-child(1) {
                background: #c084fc;
                animation-delay: 0s;
            }

            .dot:nth-child(2) {
                background: #60a5fa;
                animation-delay: 0.15s;
            }

            .dot:nth-child(3) {
                background: #818cf8;
                animation-delay: 0.3s;
            }

        /* Main Form Card */
        .form-card {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(16px);
            border-radius: 1rem;
            padding: 2rem;
            box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
            border: 1px solid rgba(255, 255, 255, 0.2);
            transition: all 0.3s ease;
            margin-bottom: 2rem;
        }

            .form-card:hover {
                transform: scale(1.02);
                box-shadow: 0 35px 60px -12px rgba(0, 0, 0, 0.25);
            }

        .form {
            display: flex;
            flex-direction: column;
            gap: 1.5rem;
        }

        .error-summary {
            color: #f87171;
            font-size: 0.875rem;
            background: rgba(153, 27, 27, 0.2);
            padding: 0.75rem;
            border-radius: 0.5rem;
            border: 1px solid rgba(239, 68, 68, 0.3);
            display: none;
        }

        .input-group {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .input-label {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            color: #e5e7eb;
            font-size: 0.875rem;
            font-weight: 500;
        }

            .input-label svg {
                width: 1rem;
                height: 1rem;
            }

        .input-wrapper {
            position: relative;
        }

        .code-input {
            width: 100%;
            padding: 1rem 1.5rem;
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 0.75rem;
            color: white;
            font-size: 1.875rem;
            font-family: 'Courier New', monospace;
            letter-spacing: 0.1em;
            text-align: center;
            transition: all 0.3s ease;
            outline: none;
        }

            .code-input::placeholder {
                color: #9ca3af;
            }

            .code-input:hover {
                background: rgba(255, 255, 255, 0.1);
            }

            .code-input:focus {
                border-color: #8b5cf6;
                box-shadow: 0 0 0 2px rgba(139, 92, 246, 0.5);
            }

        .input-overlay {
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(135deg, rgba(139, 92, 246, 0.2), rgba(59, 130, 246, 0.2));
            border-radius: 0.75rem;
            opacity: 0;
            transition: opacity 0.3s ease;
            pointer-events: none;
        }

        .input-wrapper:hover .input-overlay {
            opacity: 1;
        }

        .error-message {
            color: #f87171;
            font-size: 0.875rem;
            text-align: center;
            display: none;
        }

        .submit-btn {
            width: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            padding: 1rem 1.5rem;
            border: none;
            border-radius: 0.75rem;
            font-size: 1.125rem;
            font-weight: 500;
            color: white;
            background: linear-gradient(135deg, #7c3aed, #2563eb);
            box-shadow: 0 10px 25px -3px rgba(0, 0, 0, 0.3);
            transition: all 0.3s ease;
            cursor: pointer;
            outline: none;
        }

            .submit-btn:hover {
                background: linear-gradient(135deg, #6d28d9, #1d4ed8);
                transform: scale(1.02);
                box-shadow: 0 20px 40px -6px rgba(0, 0, 0, 0.4);
            }

            .submit-btn:focus {
                box-shadow: 0 0 0 2px rgba(139, 92, 246, 0.5);
            }

            .submit-btn:disabled {
                opacity: 0.6;
                cursor: not-allowed;
                transform: none;
            }

            .submit-btn svg {
                width: 1.25rem;
                height: 1.25rem;
                transition: transform 0.3s ease;
            }

            .submit-btn:hover:not(:disabled) svg {
                animation: spin 2s linear infinite;
            }

            .submit-btn:hover:not(:disabled) .btn-text {
                letter-spacing: 0.05em;
            }

        .actions {
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .action-btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 0.5rem;
            padding: 0.75rem 1.5rem;
            color: #c084fc;
            font-size: 0.875rem;
            font-weight: 500;
            background: none;
            border: none;
            border-radius: 0.5rem;
            transition: all 0.3s ease;
            cursor: pointer;
            text-decoration: none;
        }

            .action-btn:hover {
                color: #ddd6fe;
                background: rgba(139, 92, 246, 0.1);
            }

            .action-btn:disabled {
                opacity: 0.5;
                cursor: not-allowed;
            }

            .action-btn svg {
                width: 1rem;
                height: 1rem;
                transition: transform 0.3s ease;
            }

            .action-btn:hover:not(:disabled) svg {
                animation: pulse 1s infinite;
            }

        .back-link {
            color: #9ca3af;
        }

            .back-link:hover {
                color: white;
                background: rgba(255, 255, 255, 0.1);
            }

                .back-link:hover svg {
                    transform: translateX(-0.25rem);
                }

        /* Security Badge */
        .security-badge {
            text-align: center;
        }

        .badge {
            display: inline-flex;
            align-items: center;
            gap: 0.5rem;
            background: rgba(34, 197, 94, 0.2);
            color: #4ade80;
            padding: 0.5rem 1rem;
            border-radius: 9999px;
            font-size: 0.875rem;
            border: 1px solid rgba(34, 197, 94, 0.3);
        }

            .badge svg {
                width: 1rem;
                height: 1rem;
            }

        /* Animations */
        @@keyframes pulse {
            0%, 100%

        {
            transform: scale(1);
            opacity: 1;
        }

        50% {
            transform: scale(1.05);
            opacity: 0.8;
        }

        }
        @@keyframes bounce {
            0%, 100%

        {
            transform: translateY(0);
        }

        50% {
            transform: translateY(-25%);
        }

        }

        @@keyframes spin {
            from

        {
            transform: rotate(0deg);
        }

        to {
            transform: rotate(360deg);
        }

        }

        /* Notification styles */
        .notification {
            position: fixed;
            top: 1rem;
            right: 1rem;
            padding: 1rem 1.5rem;
            border-radius: 0.75rem;
            box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
            z-index: 1000;
            transform: translateX(100%);
            transition: transform 0.5s ease;
            backdrop-filter: blur(16px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

            .notification.success {
                background: rgba(34, 197, 94, 0.9);
                color: white;
                border-color: rgba(34, 197, 94, 0.5);
            }

            .notification.error {
                background: rgba(239, 68, 68, 0.9);
                color: white;
                border-color: rgba(239, 68, 68, 0.5);
            }

            .notification.show {
                transform: translateX(0);
            }

        .notification-content {
            display: flex;
            align-items: center;
            gap: 0.75rem;
        }

        .notification svg {
            width: 1.25rem;
            height: 1.25rem;
        }

        /* Loading state */
        .loading {
            position: relative;
            overflow: hidden;
        }

            .loading::after {
                content: '';
                position: absolute;
                top: 0;
                left: -100%;
                width: 100%;
                height: 100%;
                background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
                animation: loading 2s infinite;
            }

        @@keyframes loading {
            0%

        {
            left: -100%;
        }

        100% {
            left: 100%;
        }

        }

        /* Responsive Design */
        @@media (max-width: 640px) {
            .container

        {
            padding: 1rem;
        }

        .title {
            font-size: 2rem;
        }

        .code-input {
            font-size: 1.5rem;
        }

        .form-card {
            padding: 1.5rem;
        }

        .bg-circle {
            width: 12rem;
            height: 12rem;
        }

        }

        /* Custom scrollbar */
        ::-webkit-scrollbar {
            width: 8px;
        }

        ::-webkit-scrollbar-track {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
        }

        ::-webkit-scrollbar-thumb {
            background: linear-gradient(45deg, #8b5cf6, #3b82f6);
            border-radius: 10px;
        }

            ::-webkit-scrollbar-thumb:hover {
                background: linear-gradient(45deg, #7c3aed, #2563eb);
            }
    </style>
</head>
<body>
    <div class="container">
        <!-- Animated background elements -->
        <div class="bg-animation">
            <div class="bg-circle"></div>
            <div class="bg-circle"></div>
            <div class="bg-circle"></div>
        </div>

        <div class="content">
            <!-- Header Section -->
            <div class="header">
                <div class="logo">
                    <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                    </svg>
                </div>
                <h2 class="title">Autenticación de Dos Factores</h2>
                <p class="subtitle">Ingresa el código de verificación enviado a tu email</p>
                <div class="dots">
                    <div class="dot"></div>
                    <div class="dot"></div>
                    <div class="dot"></div>
                </div>
            </div>

            <!-- Main Form Card -->
            <div class="form-card">
                <form class="form" id="twoFactorForm" method="post" action="/VAuth/TwoFactorLogin">
                    <div class="error-summary" id="errorSummary"></div>

                    <input type="hidden" name="UserName" id="userName" value="@Model?.UserName">

                    <!-- Code Input Section -->
                    <div class="input-group">
                        <label class="input-label">
                            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                            </svg>
                            <span>Código de Verificación</span>
                        </label>

                        <div class="input-wrapper">
                            <input type="text"
                                   id="codeInput"
                                   name="Code"
                                   class="code-input"
                                   placeholder="000000"
                                   maxlength="6"
                                   pattern="[0-9]{6}"
                                   autocomplete="one-time-code"
                                   required>
                            <div class="input-overlay"></div>
                        </div>
                        <div class="error-message" id="codeError"></div>
                    </div>

                    <!-- Submit Button -->
                    <button type="submit" class="submit-btn" id="submitBtn">
                        <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        <span class="btn-text">Verificar e Ingresar</span>
                    </button>

                    <!-- Action Links -->
                    <div class="actions">
                        <button type="button" class="action-btn" id="resendBtn">
                            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                            </svg>
                            <span>¿No recibiste el código? Enviar nuevamente</span>
                        </button>

                        <a href="/VAuth/Login" class="action-btn back-link">
                            <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18" />
                            </svg>
                            <span>Volver al Login</span>
                        </a>
                    </div>
                </form>
            </div>

            <!-- Security Badge -->
            <div class="security-badge">
                <div class="badge">
                    <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z" />
                    </svg>
                    <span>Conexión Segura</span>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Variables globales
        let resendCooldown = false;
        let isProcessing = false;

        // Función para mostrar notificaciones
        function showNotification(message, type) {
            const existingNotifications = document.querySelectorAll('.notification');
            existingNotifications.forEach(n => n.remove());

            const notification = document.createElement('div');
            notification.className = `notification ${type}`;

            const iconSvg = type === 'success'
                ? '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />'
                : '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />';

            notification.innerHTML = `
                <div class="notification-content">
                    <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        ${iconSvg}
                    </svg>
                    <span>${message}</span>
                </div>
            `;

            document.body.appendChild(notification);

            setTimeout(() => {
                notification.classList.add('show');
            }, 100);

            setTimeout(() => {
                notification.classList.remove('show');
                setTimeout(() => {
                    notification.remove();
                }, 500);
            }, 5000);
        }

        // Función para hacer petición AJAX real para reenviar código
        async function requestNewCode() {
            if (resendCooldown) return;

            const userName = document.getElementById('userName').value;

            if (!userName) {
                showNotification('Error: No se pudo obtener el nombre de usuario', 'error');
                return;
            }

            const button = document.getElementById('resendBtn');
            const originalHTML = button.innerHTML;

            button.disabled = true;
            resendCooldown = true;
            button.innerHTML = `
                <svg fill="none" stroke="currentColor" viewBox="0 0 24 24" style="width: 1rem; height: 1rem; animation: spin 1s linear infinite;">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                </svg>
                <span>Enviando...</span>
            `;

            try {
                const response = await fetch('/VAuth/Request2FACode', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        UserName: userName
                    })
                });

                const result = await response.json();

                if (result.success) {
                    showNotification(result.message || '¡Código de verificación enviado a tu email!', 'success');
                } else {
                    showNotification(result.message || 'Error al enviar el código. Inténtalo de nuevo.', 'error');
                }

            } catch (error) {
                console.error('Error:', error);
                showNotification('Error de conexión. Inténtalo de nuevo.', 'error');
            }

            // Mantener el cooldown por 30 segundos
            setTimeout(() => {
                button.disabled = false;
                button.innerHTML = originalHTML;
                resendCooldown = false;
            }, 30000);
        }

        // Configuración del formulario
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.getElementById('twoFactorForm');
            const codeInput = document.getElementById('codeInput');
            const resendBtn = document.getElementById('resendBtn');
            const submitBtn = document.getElementById('submitBtn');

            // Configurar input de código
            codeInput.addEventListener('input', function(e) {
                // Solo permitir números
                this.value = this.value.replace(/\D/g, '').slice(0, 6);

                // Limpiar estilos de error
                this.style.borderColor = '';
                this.style.boxShadow = '';
                document.getElementById('codeError').style.display = 'none';

                // Activar/desactivar botón de envío
                submitBtn.disabled = this.value.length < 6;
            });

            // Enfocar input automáticamente
            codeInput.focus();

            // Animación de placeholder
            let placeholderIndex = 0;
            const placeholders = ['000000', '123456', '••••••'];

            setInterval(() => {
                if (!codeInput.value && document.activeElement !== codeInput) {
                    codeInput.placeholder = placeholders[placeholderIndex];
                    placeholderIndex = (placeholderIndex + 1) % placeholders.length;
                }
            }, 2000);

            // Configurar botón de reenvío
            resendBtn.addEventListener('click', requestNewCode);

            // Inicializar estado del botón
            submitBtn.disabled = true;

            // Manejar envío del formulario
            form.addEventListener('submit', function(e) {
                e.preventDefault();

                if (isProcessing) return;

                const code = codeInput.value;

                // Validar código
                if (code.length !== 6) {
                    showNotification('Por favor ingresa un código de 6 dígitos', 'error');
                    return;
                }

                // Deshabilitar botón y mostrar estado de carga
                isProcessing = true;
                submitBtn.disabled = true;
                submitBtn.classList.add('loading');

                const originalHTML = submitBtn.innerHTML;
                submitBtn.innerHTML = `
                    <svg fill="none" stroke="currentColor" viewBox="0 0 24 24" style="width: 1.25rem; height: 1.25rem; animation: spin 1s linear infinite;">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                    </svg>
                    <span>Verificando...</span>
                `;

                // Enviar formulario al servidor
                setTimeout(() => {
                    this.submit();
                }, 1000);
            });

            // Permitir envío con Enter
            codeInput.addEventListener('keypress', function(e) {
                if (e.key === 'Enter' && this.value.length === 6 && !isProcessing) {
                    form.dispatchEvent(new Event('submit'));
                }
            });
        });
    </script>
</body>
</html>