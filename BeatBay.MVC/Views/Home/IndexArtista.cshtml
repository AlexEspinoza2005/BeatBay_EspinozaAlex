@{
    ViewData["Title"] = "Artist Panel";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    /* Variables simplificadas */
    :root {
        --primary: #6366f1;
        --secondary: #8b5cf6;
        --success: #10b981;
        --warning: #f59e0b;
        --danger: #ef4444;
        --info: #0ea5e9;
        --gray: #6b7280;
        --light: #f8fafc;
        --white: #ffffff;
        --border: #e5e7eb;
    }

    body {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
        margin: 0;
        padding: 0;
    }

    /* Cards */
    .card {
        background: var(--white);
        border: none;
        border-radius: 1rem;
        box-shadow: 0 10px 25px rgba(0,0,0,0.1);
        overflow: hidden;
        margin-bottom: 1.5rem;
        transition: all 0.3s ease;
    }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 30px rgba(0,0,0,0.2);
        }

    .card-header {
        background: linear-gradient(135deg, var(--primary), var(--secondary));
        color: white;
        padding: 1rem 1.5rem;
        border-bottom: none;
    }

    .card-title {
        font-size: 1.4rem;
        font-weight: 600;
        margin: 0;
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    /* Botones */
    .btn {
        border-radius: 0.75rem;
        padding: 0.6rem 1.25rem;
        font-weight: 500;
        transition: all 0.3s ease;
        border: none;
    }

    .btn-primary {
        background: linear-gradient(135deg, var(--primary), var(--secondary));
    }

    .btn-success {
        background: linear-gradient(135deg, var(--success), #059669);
    }

    .btn-info {
        background: linear-gradient(135deg, var(--info), #0284c7);
    }

    .btn-warning {
        background: linear-gradient(135deg, var(--warning), #d97706);
    }

    .btn-outline-primary {
        background: transparent;
        border: 1px solid var(--primary);
        color: var(--primary);
    }

        .btn-outline-primary:hover {
            background: linear-gradient(135deg, var(--primary), var(--secondary));
            color: white;
        }

    /* Stats cards */
    .stats-card {
        background: var(--white);
        border: none;
        border-radius: 1rem;
        box-shadow: 0 6px 20px rgba(0,0,0,0.1);
        overflow: hidden;
        height: 100%;
        transition: all 0.3s ease;
    }

        .stats-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 30px rgba(0,0,0,0.15);
        }

    .stats-number {
        font-size: 2.2rem;
        font-weight: 700;
        margin: 0.5rem 0;
        text-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .stats-icon {
        font-size: 2.5rem;
        opacity: 0.8;
        margin-left: auto;
    }

    /* Quick action buttons */
    .quick-action-btn {
        min-height: 100px;
        border-radius: 1rem;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        transition: all 0.3s ease;
    }

        .quick-action-btn:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0,0,0,0.15);
        }

    /* List items */
    .list-group-item {
        border-left: none;
        border-right: none;
        padding: 1rem 1.5rem;
    }

        .list-group-item:first-child {
            border-top: none;
        }

        .list-group-item:last-child {
            border-bottom: none;
        }

    /* Spinner */
    .spinner-border {
        width: 2rem;
        height: 2rem;
        border-width: 0.15em;
    }

    /* Modal */
    .modal-content {
        border-radius: 1rem;
        overflow: hidden;
        border: none;
    }

    /* Alert */
    .alert {
        border-radius: 0.75rem;
        border: none;
        padding: 1rem 1.25rem;
    }

    .alert-success {
        background: linear-gradient(135deg, #d1fae5, #a7f3d0);
        color: #065f46;
    }

    .alert-danger {
        background: linear-gradient(135deg, #fee2e2, #fecaca);
        color: #991b1b;
    }
</style>

<!-- Edit Profile Modal -->
<div class="modal fade" id="editProfileModal" tabindex="-1" aria-labelledby="editProfileModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editProfileModalLabel">
                    <i class="fas fa-edit"></i> Edit Profile
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <form id="profileForm" method="post">
                @Html.AntiForgeryToken()
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="Name" class="form-label">Name</label>
                        <input type="text" class="form-control" id="Name" name="Name" value="@Model?.Name" required>
                    </div>
                    <div class="mb-3">
                        <label for="Bio" class="form-label">Bio</label>
                        <textarea class="form-control" id="Bio" name="Bio" rows="3">@Model?.Bio</textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save"></i> Save Changes
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="container-fluid py-4">
    <!-- Panel Header -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <div class="row align-items-center">
                        <div class="col-md-8">
                            <h1 class="h2 mb-1">
                                <i class="fas fa-music me-2"></i>
                                Artist Panel
                            </h1>
                            <p class="mb-0 opacity-75">Manage your music and review your statistics</p>
                        </div>
                        <div class="col-md-4 text-end">
                            <div class="d-flex justify-content-end align-items-center">
                                <div class="me-3">
                                    <small class="opacity-75">Last access:</small>
                                    <div class="fw-bold">@DateTime.Now.ToString("MM/dd/yyyy HH:mm")</div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Quick Actions -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title mb-3">
                        <i class="fas fa-bolt text-warning me-2"></i>
                        Quick Actions
                    </h5>
                    <div class="row g-3">
                        <div class="col-md-3 col-sm-6">
                            <a href="@Url.Action("Create", "Songs")" class="btn btn-success quick-action-btn text-decoration-none">
                                <i class="fas fa-cloud-upload-alt fa-2x mb-2"></i>
                                <span class="fw-bold">Upload Music</span>
                                <small class="opacity-75">New track</small>
                            </a>
                        </div>
                        <div class="col-md-3 col-sm-6">
                            <a href="@Url.Action("MySongs", "Songs")" class="btn btn-primary quick-action-btn text-decoration-none">
                                <i class="fas fa-music fa-2x mb-2"></i>
                                <span class="fw-bold">My Songs</span>
                                <small class="opacity-75">Manage music</small>
                            </a>
                        </div>
                        <div class="col-md-3 col-sm-6">
                            <a href="@Url.Action("Index", "ArtistStatistics")" class="btn btn-info quick-action-btn text-decoration-none">
                                <i class="fas fa-chart-line fa-2x mb-2"></i>
                                <span class="fw-bold">Statistics</span>
                                <small class="opacity-75">View metrics</small>
                            </a>
                        </div>
                        <div class="col-md-3 col-sm-6">
                            <button class="btn btn-warning quick-action-btn text-decoration-none" data-bs-toggle="modal" data-bs-target="#editProfileModal">
                                <i class="fas fa-user-edit fa-2x mb-2"></i>
                                <span class="fw-bold">My Profile</span>
                                <small class="opacity-75">Edit data</small>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Alert Container -->
    <div id="alertContainer" class="position-fixed top-0 end-0 p-3" style="z-index: 1055;"></div>


    <!-- Statistics Summary -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-chart-bar text-primary me-2"></i>
                            Statistics Summary
                        </h5>
                        <a href="@Url.Action("Index", "ArtistStatistics")" class="btn btn-outline-primary btn-sm">
                            View Details <i class="fas fa-arrow-right ms-1"></i>
                        </a>
                    </div>
                    @if (ViewBag.Summary != null)
                    {
                        <div class="row g-3">
                            <div class="col-md-3 col-sm-6">
                                <div class="stats-card">
                                    <div class="card-body text-center">
                                        <i class="fas fa-music text-primary fa-2x mb-2"></i>
                                        <h4 class="stats-number mb-1">
                                            @{
                                                var totalSongs = 0;
                                                try
                                                {
                                                    totalSongs = (int)(ViewBag.Summary.totalSongs ?? ViewBag.Summary.TotalSongs ?? 0);
                                                }
                                                catch
                                                {
                                                    var summaryObj = ViewBag.Summary as dynamic;
                                                    if (summaryObj != null)
                                                    {
                                                        totalSongs = (int)(summaryObj.totalSongs ?? summaryObj.TotalSongs ?? 0);
                                                    }
                                                }
                                            }
                                            @totalSongs.ToString("N0")
                                        </h4>
                                        <small class="text-muted">Total Songs</small>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3 col-sm-6">
                                <div class="stats-card">
                                    <div class="card-body text-center">
                                        <i class="fas fa-play-circle text-success fa-2x mb-2"></i>
                                        <h4 class="stats-number mb-1">
                                            @{
                                                var totalPlays = 0;
                                                try
                                                {
                                                    totalPlays = (int)(ViewBag.Summary.totalPlays ?? ViewBag.Summary.TotalPlays ?? 0);
                                                }
                                                catch
                                                {
                                                    var summaryObj = ViewBag.Summary as dynamic;
                                                    if (summaryObj != null)
                                                    {
                                                        totalPlays = (int)(summaryObj.totalPlays ?? summaryObj.TotalPlays ?? 0);
                                                    }
                                                }
                                            }
                                            @totalPlays.ToString("N0")
                                        </h4>
                                        <small class="text-muted">Total Plays</small>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3 col-sm-6">
                                <div class="stats-card">
                                    <div class="card-body text-center">
                                        <i class="fas fa-clock text-warning fa-2x mb-2"></i>
                                        <h4 class="stats-number mb-1">
                                            @{
                                                var totalDuration = 0.0;
                                                try
                                                {
                                                    totalDuration = Convert.ToDouble(ViewBag.Summary.totalDurationPlayed ?? ViewBag.Summary.TotalDurationPlayed ?? 0);
                                                }
                                                catch
                                                {
                                                    var summaryObj = ViewBag.Summary as dynamic;
                                                    if (summaryObj != null)
                                                    {
                                                        totalDuration = Convert.ToDouble(summaryObj.totalDurationPlayed ?? summaryObj.TotalDurationPlayed ?? 0);
                                                    }
                                                }

                                                var timeSpan = TimeSpan.FromSeconds(totalDuration);
                                                string formattedTime = totalDuration > 0 ?
                                                (timeSpan.TotalHours >= 1 ? timeSpan.ToString(@"hh\:mm\:ss") : timeSpan.ToString(@"mm\:ss"))
                                                : "00:00";
                                            }
                                            @formattedTime
                                        </h4>
                                        <small class="text-muted">Tiempo Total Reproducido</small>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3 col-sm-6">
                                <div class="stats-card">
                                    <div class="card-body text-center">
                                        <i class="fas fa-check-circle text-info fa-2x mb-2"></i>
                                        <h4 class="stats-number mb-1">
                                            @{
                                                var activeSongs = 0;
                                                try
                                                {
                                                    activeSongs = (int)(ViewBag.Summary.activeSongs ?? ViewBag.Summary.ActiveSongs ?? 0);
                                                }
                                                catch
                                                {
                                                    var summaryObj = ViewBag.Summary as dynamic;
                                                    if (summaryObj != null)
                                                    {
                                                        activeSongs = (int)(summaryObj.activeSongs ?? summaryObj.ActiveSongs ?? 0);
                                                    }
                                                }
                                            }
                                            @activeSongs.ToString("N0")
                                        </h4>
                                        <small class="text-muted">Active Songs</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="row g-3">
                            <div class="col-md-3 col-sm-6">
                                <div class="stats-card">
                                    <div class="card-body text-center">
                                        <i class="fas fa-music text-primary fa-2x mb-2"></i>
                                        <h4 class="stats-number mb-1" id="totalSongs">-</h4>
                                        <small class="text-muted">Total Songs</small>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3 col-sm-6">
                                <div class="stats-card">
                                    <div class="card-body text-center">
                                        <i class="fas fa-play-circle text-success fa-2x mb-2"></i>
                                        <h4 class="stats-number mb-1" id="totalPlays">-</h4>
                                        <small class="text-muted">Total Plays</small>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3 col-sm-6">
                                <div class="stats-card">
                                    <div class="card-body text-center">
                                        <i class="fas fa-clock text-warning fa-2x mb-2"></i>
                                        <h4 class="stats-number mb-1" id="totalDuration">-</h4>
                                        <small class="text-muted">Tiempo Total Reproducido</small>
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-3 col-sm-6">
                                <div class="stats-card">
                                    <div class="card-body text-center">
                                        <i class="fas fa-trophy text-danger fa-2x mb-2"></i>
                                        <h4 class="stats-number mb-1" id="topSong">-</h4>
                                        <small class="text-muted">Top Song</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

    <!-- Recent Songs -->
    <div class="row mb-4">
        <div class="col-md-8">
            <div class="card">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h5 class="card-title mb-0">
                            <i class="fas fa-history text-secondary me-2"></i>
                            Recent Songs
                        </h5>
                        <a href="@Url.Action("MySongs", "Songs")" class="btn btn-outline-secondary btn-sm">
                            View All <i class="fas fa-arrow-right ms-1"></i>
                        </a>
                    </div>
                    <div id="recentSongs" class="list-group list-group-flush">
                        <div class="text-center py-4">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-2 text-muted">Loading songs...</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col-md-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title mb-3">
                        <i class="fas fa-star text-warning me-2"></i>
                        Top Songs
                    </h5>
                    <div id="topSongs" class="list-group list-group-flush">
                        <div class="text-center py-4">
                            <div class="spinner-border text-warning" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-2 text-muted">Loading top songs...</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Additional Tools -->
    <div class="row">
        <div class="col-12">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title mb-3">
                        <i class="fas fa-tools text-dark me-2"></i>
                        Additional Tools
                    </h5>
                    <div class="row g-3">
                        <div class="col-md-6">
                            <div class="d-grid">
                                <a href="@Url.Action("TopSongs", "ArtistStatistics")" class="btn btn-outline-primary">
                                    <i class="fas fa-medal me-2"></i>
                                    Detailed Top Songs
                                </a>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="d-grid">
                                <a href="@Url.Action("DownloadReport", "ArtistStatistics")" class="btn btn-outline-success">
                                    <i class="fas fa-download me-2"></i>
                                    Download Report
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Alerts -->
@if (TempData["Success"] != null)
{
    <div class="position-fixed top-0 end-0 p-3" style="z-index: 1055;">
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="fas fa-check-circle me-2"></i>
            @TempData["Success"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    </div>
}

@if (TempData["Error"] != null)
{
    <div class="position-fixed top-0 end-0 p-3" style="z-index: 1055;">
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="fas fa-exclamation-triangle me-2"></i>
            @TempData["Error"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    </div>
}

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Handle profile form submission
        const profileForm = document.getElementById('profileForm');
        if (profileForm) {
            profileForm.addEventListener('submit', async function(e) {
                e.preventDefault();

                const submitButton = this.querySelector('button[type="submit"]');
                const originalButtonText = submitButton.innerHTML;
                submitButton.disabled = true;
                submitButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';

                try {
                    const formData = new FormData(this);
                    formData.append('redirect', 'false'); // Ensure we don't redirect

                    const response = await fetch('@Url.Action("UpdateProfile", "VAuth")', {
                        method: 'POST',
                        body: formData,
                        headers: {
                            'Accept': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        }
                    });

                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }

                    const data = await response.json();

                    if (data.success) {
                        // Hide the modal
                        const modal = bootstrap.Modal.getInstance(document.getElementById('editProfileModal'));
                        if (modal) modal.hide();

                        // Show success message
                        showAlert(data.message || 'Profile updated successfully!', 'success');
                    } else {
                        showAlert(data.message || 'Error updating profile', 'danger');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    showAlert('An error occurred while updating your profile', 'danger');
                } finally {
                    submitButton.disabled = false;
                    submitButton.innerHTML = originalButtonText;
                }
            });
        }

        loadDashboardData();
    });

    function showAlert(message, type) {
        const alertContainer = document.getElementById('alertContainer');
        const alert = document.createElement('div');
        alert.className = `alert alert-${type} alert-dismissible fade show`;
        alert.role = 'alert';
        alert.innerHTML = `
            <i class="fas ${type === 'success' ? 'fa-check-circle' : 'fa-exclamation-triangle'} me-2"></i>
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        `;

        alertContainer.appendChild(alert);

        setTimeout(() => {
            const bsAlert = new bootstrap.Alert(alert);
            bsAlert.close();
        }, 5000);
    }

    function loadDashboardData() {
        loadStats();
        loadRecentSongs();
        loadTopSongs();
    }

    function loadStats() {
        fetch('@Url.Action("GetAllSongs", "ArtistStatistics")')
            .then(response => response.json())
            .then(data => {
                if (data.success && data.data) {
                    const songs = data.data;
                    document.getElementById('totalSongs').textContent = songs.length;

                    const totalPlays = songs.reduce((sum, song) => sum + (song.playCount || 0), 0);
                    document.getElementById('totalPlays').textContent = totalPlays.toLocaleString();

                        const totalDuration = songs.reduce((sum, song) => sum + (song.totalDurationPlayed || 0), 0);
    const timeSpan = totalDuration > 0 ?
        (totalDuration >= 3600 ?
            Math.floor(totalDuration / 3600) + ':' +
            Math.floor((totalDuration % 3600) / 60).toString().padStart(2, '0') + ':' +
            Math.floor(totalDuration % 60).toString().padStart(2, '0')
            :
            Math.floor(totalDuration / 60).toString().padStart(2, '0') + ':' +
            Math.floor(totalDuration % 60).toString().padStart(2, '0')
        ) : '00:00';
    document.getElementById('totalDuration').textContent = timeSpan;

                    const topSong = songs.sort((a, b) => (b.playCount || 0) - (a.playCount || 0))[0];
                    document.getElementById('topSong').textContent = topSong ? topSong.title.substring(0, 15) + '...' : 'N/A';
                }
            })
            .catch(error => {
                console.error('Error loading stats:', error);
                document.getElementById('totalSongs').textContent = 'Error';
                document.getElementById('totalPlays').textContent = 'Error';
                document.getElementById('totalDuration').textContent = 'Error';
                document.getElementById('topSong').textContent = 'Error';
            });
    }

    function loadRecentSongs() {
        fetch('@Url.Action("GetAllSongs", "ArtistStatistics")')
            .then(response => response.json())
            .then(data => {
                const container = document.getElementById('recentSongs');

                if (data.success && data.data && data.data.length > 0) {
                    const songs = data.data.slice(0, 5);

                    container.innerHTML = songs.map(song => `
                        <div class="list-group-item border-0 py-3">
                            <div class="d-flex justify-content-between align-items-center">
                                <div class="flex-grow-1">
                                    <h6 class="mb-1 text-truncate">${song.title}</h6>
                                    <small class="text-muted">
                                        <i class="fas fa-clock me-1"></i>
                                        ${Math.floor(song.duration / 60)}:${(song.duration % 60).toString().padStart(2, '0')}
                                        <span class="ms-2">
                                            <i class="fas fa-play me-1"></i>
                                            ${song.playCount || 0} plays
                                        </span>
                                    </small>
                                </div>
                                <div class="dropdown">
                                    <button class="btn btn-sm btn-outline-secondary" type="button" data-bs-toggle="dropdown">
                                        <i class="fas fa-ellipsis-v"></i>
                                    </button>
                                    <ul class="dropdown-menu">
                                        <li><a class="dropdown-item" href="@Url.Action("Details", "Songs")/${song.id}">
                                            <i class="fas fa-eye me-2"></i>View Details
                                        </a></li>
                                        <li><a class="dropdown-item" href="@Url.Action("Edit", "Songs")/${song.id}">
                                            <i class="fas fa-edit me-2"></i>Edit
                                        </a></li>
                                        <li><a class="dropdown-item" href="@Url.Action("SongDetails", "ArtistStatistics")/${song.id}">
                                            <i class="fas fa-chart-line me-2"></i>Statistics
                                        </a></li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                    `).join('');
                } else {
                    container.innerHTML = `
                        <div class="text-center py-4">
                            <i class="fas fa-music text-muted fa-3x mb-3"></i>
                            <p class="text-muted">You don't have any songs yet</p>
                            <a href="@Url.Action("Create", "Songs")" class="btn btn-primary">
                                <i class="fas fa-plus me-2"></i>Upload your first song
                            </a>
                        </div>
                    `;
                }
            })
            .catch(error => {
                console.error('Error loading recent songs:', error);
                document.getElementById('recentSongs').innerHTML = `
                    <div class="text-center py-4">
                        <i class="fas fa-exclamation-triangle text-danger fa-2x mb-2"></i>
                        <p class="text-muted">Error loading songs</p>
                    </div>
                `;
            });
    }

    function loadTopSongs() {
        fetch('@Url.Action("GetAllSongs", "ArtistStatistics")')
            .then(response => response.json())
            .then(data => {
                const container = document.getElementById('topSongs');

                if (data.success && data.data && data.data.length > 0) {
                    const topSongs = data.data
                        .sort((a, b) => (b.playCount || 0) - (a.playCount || 0))
                        .slice(0, 5);

                    container.innerHTML = topSongs.map((song, index) => `
                        <div class="list-group-item border-0 py-2">
                            <div class="d-flex align-items-center">
                                <div class="badge bg-warning text-dark me-2">${index + 1}</div>
                                <div class="flex-grow-1">
                                    <h6 class="mb-0 text-truncate">${song.title}</h6>
                                    <small class="text-muted">${song.playCount || 0} plays</small>
                                </div>
                            </div>
                        </div>
                    `).join('');
                } else {
                    container.innerHTML = `
                        <div class="text-center py-4">
                            <i class="fas fa-star text-muted fa-2x mb-2"></i>
                            <p class="text-muted">No data available</p>
                        </div>
                    `;
                }
            })
            .catch(error => {
                console.error('Error loading top songs:', error);
                document.getElementById('topSongs').innerHTML = `
                    <div class="text-center py-4">
                        <i class="fas fa-exclamation-triangle text-danger fa-2x mb-2"></i>
                        <p class="text-muted">Error loading top songs</p>
                    </div>
                `;
            });
    }

    setTimeout(() => {
        const alerts = document.querySelectorAll('.alert');
        alerts.forEach(alert => {
            if (alert.querySelector('.btn-close')) {
                alert.querySelector('.btn-close').click();
            }
        });
    }, 5000);
</script>